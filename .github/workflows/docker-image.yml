name: Aks demo CI/CD

on:
  push:
    branches: [ "master" ]

jobs:
  prepare:
     runs-on: ubuntu-latest
     steps:
     - name: Set tag
       run: echo "docker_tag=$(date +%s)" >> $GITHUB_ENV
     outputs:
       docker_tag: ${{env.docker_tag}}
  
  build-weather-forecast-api:
    needs: 
      prepare
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3   
    - name: Build the Docker image for weatherforcast
      working-directory: ./src/WeatherForecastAPI
      run: docker build . --file Dockerfile --tag zxd882002/weather-forecast-api:${{ needs.prepare.outputs.docker_tag }}
    - name: Login to DockerHub Registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    - name: Push the image to docker hub
      run: docker push zxd882002/weather-forecast-api:${{ needs.prepare.outputs.docker_tag }}
      
  build-portal-home:
    needs: 
      prepare
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Build the Docker image for portal home
      working-directory: ./src/portal-home
      run: docker build . --file Dockerfile --tag zxd882002/portal-home:${{ needs.prepare.outputs.docker_tag }}
    - name: Login to DockerHub Registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    - name: Push the image to docker hub
      run: docker push zxd882002/portal-home:${{ needs.prepare.outputs.docker_tag }}
      
  helm-deploy:
    needs:
    - prepare
    - build-weather-forecast-api
    - build-portal-home
    runs-on: ubuntu-latest
    steps:
    - name: echo start helm chart build
      run: echo "start helm chart"
    - uses: actions/checkout@v3
    - name: inject istio
      uses: myrotvorets/kubectl-action@2.0.0
      with:
        config: ${{ secrets.KUBECONFIG }}
        version: latest
        args: label namespace default istio-injection=enabled   
    - name: Helm 3
      uses: WyriHaximus/github-action-helm3@v2.0
      with:
        exec: |
          helm upgrade --namespace myaksdemo --install --set version=${{ needs.prepare.outputs.docker_tag }} --wait aksdemo ./helm
        kubeconfig: '${{ secrets.KUBECONFIG }}'
